"use strict";
var __assign = (this && this.__assign) || Object.assign || function(t) {
    for (var s, i = 1, n = arguments.length; i < n; i++) {
        s = arguments[i];
        for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
            t[p] = s[p];
    }
    return t;
};
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = y[op[0] & 2 ? "return" : op[0] ? "throw" : "next"]) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [0, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
var __rest = (this && this.__rest) || function (s, e) {
    var t = {};
    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
        t[p] = s[p];
    if (s != null && typeof Object.getOwnPropertySymbols === "function")
        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) if (e.indexOf(p[i]) < 0)
            t[p[i]] = s[p[i]];
    return t;
};
Object.defineProperty(exports, "__esModule", { value: true });
var field_as_query_1 = require("../graphql/field-as-query");
var language_utils_1 = require("../graphql/language-utils");
var schema_utils_1 = require("../graphql/schema-utils");
var resolver_utils_1 = require("../graphql/resolver-utils");
var execution_result_1 = require("../graphql/execution-result");
var errors_in_result_1 = require("../graphql/errors-in-result");
var error_paths_1 = require("./helpers/error-paths");
/**
 * Adds resolvers to the top-level fields of all root types that proxy the request to a specified endpoint
 */
var ProxyResolversModule = /** @class */ (function () {
    function ProxyResolversModule(config) {
        this.config = config;
    }
    ProxyResolversModule.prototype.getSchemaTransformer = function () {
        return new ResolverTransformer(this.config);
    };
    return ProxyResolversModule;
}());
exports.ProxyResolversModule = ProxyResolversModule;
var ResolverTransformer = /** @class */ (function () {
    function ResolverTransformer(config) {
        this.config = config;
    }
    ResolverTransformer.prototype.transformField = function (config, context) {
        var _this = this;
        if (!schema_utils_1.isRootType(context.oldOuterType, context.oldSchema)) {
            return config;
        }
        return __assign({}, config, { resolve: function (source, args, context, info) { return __awaiter(_this, void 0, void 0, function () {
                var _a, selectionSet, parts, aliases, fieldNodes, newSelectionSet, query, result, data, propertyOnResult;
                return __generator(this, function (_b) {
                    switch (_b.label) {
                        case 0:
                            _a = field_as_query_1.getFieldAsQueryParts(info), selectionSet = _a.selectionSet, parts = __rest(_a, ["selectionSet"]);
                            aliases = resolver_utils_1.collectAliasesInResponsePath(info.path);
                            fieldNodes = language_utils_1.collectFieldNodesInPath(info.operation.selectionSet, aliases, info.fragments);
                            newSelectionSet = language_utils_1.cloneSelectionChain(fieldNodes, selectionSet.selections.length ? selectionSet : undefined);
                            query = field_as_query_1.getQueryFromParts(__assign({}, parts, { selectionSet: newSelectionSet }));
                            query = this.config.processQuery(query);
                            return [4 /*yield*/, this.config.client.execute(query.document, query.variableValues, context)];
                        case 1:
                            result = _b.sent();
                            result = errors_in_result_1.moveErrorsToData(result, function (e) { return error_paths_1.prefixGraphQLErrorPath(e, info.path, 1); });
                            data = execution_result_1.assertSuccessfulResult(result);
                            propertyOnResult = aliases[aliases.length - 1];
                            if (typeof data != 'object' || !(propertyOnResult in data)) {
                                throw new Error("Expected GraphQL endpoint to return object with property " + JSON.stringify(propertyOnResult));
                            }
                            return [2 /*return*/, data[propertyOnResult]];
                    }
                });
            }); } });
    };
    return ResolverTransformer;
}());
exports.ResolverTransformer = ResolverTransformer;
//# sourceMappingURL=proxy-resolvers.js.map