import { GraphQLDirective, GraphQLEnumType, GraphQLEnumTypeConfig, GraphQLField, GraphQLFieldConfig, GraphQLFieldConfigMap, GraphQLFieldMap, GraphQLInputField, GraphQLInputFieldConfig, GraphQLInputObjectType, GraphQLInputObjectTypeConfig, GraphQLInterfaceType, GraphQLInterfaceTypeConfig, GraphQLNamedType, GraphQLObjectType, GraphQLObjectTypeConfig, GraphQLScalarType, GraphQLScalarTypeConfig, GraphQLSchema, GraphQLType, GraphQLUnionType, GraphQLUnionTypeConfig } from 'graphql';
import { GraphQLDirectiveConfig } from 'graphql/type/directives';
export declare type TransformationFunction<TConfig, TContext extends SchemaTransformationContext> = (config: TConfig, context: TContext) => TConfig;
/**
 * An set of transformation functions that can alter parts of a schema
 */
export interface SchemaTransformer {
    transformScalarType?: TransformationFunction<GraphQLScalarTypeConfig<any, any>, TypeTransformationContext<GraphQLScalarType>>;
    transformEnumType?: TransformationFunction<GraphQLEnumTypeConfig, TypeTransformationContext<GraphQLEnumType>>;
    transformInterfaceType?: TransformationFunction<GraphQLInterfaceTypeConfig<any, any>, TypeTransformationContext<GraphQLInterfaceType>>;
    transformInputObjectType?: TransformationFunction<GraphQLInputObjectTypeConfig, TypeTransformationContext<GraphQLInputObjectType>>;
    transformUnionType?: TransformationFunction<GraphQLUnionTypeConfig<any, any>, TypeTransformationContext<GraphQLUnionType>>;
    transformObjectType?: TransformationFunction<GraphQLObjectTypeConfig<any, any>, TypeTransformationContext<GraphQLObjectType>>;
    transformDirective?: TransformationFunction<GraphQLDirectiveConfig, DirectiveTransformationContext>;
    transformField?: TransformationFunction<GraphQLNamedFieldConfig<any, any>, FieldTransformationContext>;
    transformFields?: TransformationFunction<GraphQLFieldConfigMap<any, any>, FieldsTransformationContext>;
    transformInputField?: TransformationFunction<GraphQLNamedInputFieldConfig, InputFieldTransformationContext>;
}
export interface SchemaTransformationContext {
    /**
     * Finds a type of the new schema that corresponds to the given type in the old schema
     * @param type
     */
    mapType<T extends GraphQLType>(type: T): T;
    /**
     * Finds a type of the new schema given its name in the old schema
     * @param name
     */
    findType(name: string): GraphQLNamedType | undefined;
    /**
     * Creates a new GraphQLType for a given type and passes it through custom transformer functions. The regular
     * transformer functions passed to transformSchema() are ignored.
     */
    copyType<T extends GraphQLType>(type: T, transformer: SchemaTransformer): T;
    readonly oldSchema: GraphQLSchema;
}
export interface TypeTransformationContext<T extends GraphQLType> extends SchemaTransformationContext {
    /**
     * The original version of the type
     */
    readonly oldType: T;
}
export interface DirectiveTransformationContext extends SchemaTransformationContext {
    /**
     * The original version of the directive
     */
    readonly oldDirective: GraphQLDirective;
}
export interface FieldTransformationContext extends SchemaTransformationContext {
    /**
     * The original version of the field
     */
    readonly oldField: GraphQLField<any, any>;
    /**
     * Gets the type (in the new schema) that defined the field being transformed
     */
    readonly newOuterType: GraphQLObjectType | GraphQLInterfaceType;
    /**
     * Gets the type (in the old schema) that defined the field being transformed
     */
    readonly oldOuterType: GraphQLObjectType | GraphQLInterfaceType;
}
export interface FieldsTransformationContext extends SchemaTransformationContext {
    /**
     * The original version of the fields
     */
    readonly oldFields: GraphQLFieldMap<any, any>;
    /**
     * Gets the type (in the new schema) that defined the field being transformed
     */
    readonly newOuterType: GraphQLObjectType | GraphQLInterfaceType;
    /**
     * Gets the type (in the old schema) that defined the field being transformed
     */
    readonly oldOuterType: GraphQLObjectType | GraphQLInterfaceType;
}
export interface InputFieldTransformationContext extends SchemaTransformationContext {
    /**
     * The original version of the field
     */
    readonly oldField: GraphQLInputField;
    /**
     * Gets the type (in the new schema) that defined the field being transformed
     */
    readonly newOuterType: GraphQLInputObjectType;
    /**
     * Gets the type (in the old schema) that defined the field being transformed
     */
    readonly oldOuterType: GraphQLInputObjectType;
}
export interface GraphQLNamedFieldConfig<TSource, TContext> extends GraphQLFieldConfig<TSource, TContext> {
    name: string;
}
export interface GraphQLNamedInputFieldConfig extends GraphQLInputFieldConfig {
    name: string;
}
/**
 * Binds all SchemaTransformer methods to the SchemaTransformer itself, effectively converting a class to a function tuple
 * @param {SchemaTransformer[]} t
 * @returns {SchemaTransformer}
 */
export declare function bindTransformerFunctions(t: SchemaTransformer): SchemaTransformer;
/**
 * Combines multiple transformers that into one that executes the transformation functions in the given order
 */
export declare function combineTransformers(...transformers: SchemaTransformer[]): SchemaTransformer;
/**
 * Clones a GraphQLSchema by destructuring it into GraphQL's config objects and executes custom transformers
 * on these config objects
 *
 * @param schema
 * @param transformers
 */
export declare function transformSchema(schema: GraphQLSchema, transformers: SchemaTransformer): GraphQLSchema;
