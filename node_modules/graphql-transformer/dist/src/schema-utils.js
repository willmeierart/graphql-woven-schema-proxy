"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var graphql_1 = require("graphql");
/**
 * Orders the given types so that no forward references occur when traversing the type hierarchy
 * Note that only interface implementations and union option types are respected, fields are not included
 */
function orderTypesTopologically(types) {
    function order(t) {
        if (t instanceof graphql_1.GraphQLInterfaceType) {
            return 0;
        }
        if (t instanceof graphql_1.GraphQLUnionType) {
            return 2;
        }
        return 1;
    }
    return types.slice().sort(function (a, b) { return order(a) - order(b); });
}
exports.orderTypesTopologically = orderTypesTopologically;
/**
 * Finds a field by traversing a schema from field to field
 * @param type the type where to start
 * @param fieldNames an array of field names to traverse
 * @return the field, or undefined if not found
 */
function walkFields(type, fieldNames) {
    var field;
    var currentType = type;
    for (var _i = 0, fieldNames_1 = fieldNames; _i < fieldNames_1.length; _i++) {
        var fieldName = fieldNames_1[_i];
        if (!(currentType instanceof graphql_1.GraphQLObjectType) && !(currentType instanceof graphql_1.GraphQLInterfaceType)) {
            return undefined;
        }
        var fields = currentType.getFields();
        if (!(fieldName in fields)) {
            return undefined;
        }
        field = fields[fieldName];
        currentType = field.type;
    }
    return field;
}
exports.walkFields = walkFields;
//# sourceMappingURL=schema-utils.js.map