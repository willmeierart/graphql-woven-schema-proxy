export declare function objectValues<T>(obj: {
    [name: string]: T;
}): T[];
export declare function mapValues<TIn, TOut>(obj: {
    [key: string]: TIn;
}, fn: (value: TIn, key: string) => TOut): {
    [key: string]: TOut;
};
export declare function filterValues<TValue>(obj: {
    [key: string]: TValue;
}, predicate: (value: TValue, key: string) => boolean): {
    [key: string]: TValue;
};
/**
 * Removes object properties and array values that do not match a predicate
 */
export declare function filterValuesDeep(obj: any, predicate: (value: any) => boolean): any;
export declare function flatten<T>(input: T[][]): T[];
export declare function flatMap<TIn, TOut>(input: TIn[], fn: (input: TIn) => TOut[]): TOut[];
export declare function compact<T>(arr: (T | undefined | null)[]): T[];
/**
 * Binds a function, to an object, or returns undefined if the function is undefined
 * @param fn the function to bind
 * @param obj the object to bind the function to
 * @returns the bound function, or undefined
 */
export declare function bindNullable<T>(fn: (T & Function) | undefined, obj: any): (T & Function) | undefined;
